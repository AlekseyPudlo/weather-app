{"version":3,"sources":["components/titles.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Titles","props","react_default","a","createElement","Form","Weather","App","metaWeatherUrl","fetch","then","res","json","console","log","forEach","element","catch","titles","components_form","loadWeather","this","getWether","weather","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+PAUeA,EARA,SAACC,GACZ,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,sCCKGC,EARF,SAACJ,GACV,OACIC,EAAAC,EAAAC,cAAA,aCMOE,EARC,SAACL,GACb,OACIC,EAAAC,EAAAC,cAAA,iDCgDOG,kTA7CC,KACG,uCACXC,EACL,qEAEKC,MAJW,uCAIMD,GACrBE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAE,GACLC,QAAQC,IAAIF,GACZA,EAAKG,QAAQ,SAAAC,GACZH,QAAQC,IAAIE,OAGbC,MAAM,kBACNJ,QAAQC,IACP,qBAAkBN,EAAiB,kKAoBtC,OACCN,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAACc,EAAD,MACAhB,EAAAC,EAAAC,cAACe,EAAD,CAAMC,YAAaC,KAAKC,YACxBpB,EAAAC,EAAAC,cAACmB,EAAD,cAzCcC,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.1577366c.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Titles = (props) => {\n    return(\n        <div>\n            <h1>Weather application!!!</h1>\n        </div>\n    )\n}\n\nexport default Titles;","import React from \"react\";\n\nconst Form = (props) => {\n    return(\n        <div>\n            \n        </div>\n    )\n}\n\nexport default Form;","import React from \"react\";\n\nconst Weather = (props) => {\n    return(\n        <div>\n            Here the weather app should be!!!\n        </div>\n    )\n}\n\nexport default Weather;","import React from \"react\";\nimport Titles from \"./components/titles\";\nimport Form from \"./components/form\";\nimport Weather from \"./components/weather\";\n\nclass App extends React.Component {\n\tasync componentDidMount() {\n\t\tconst query = 'ta';\n\t\tconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\n\t\tconst metaWeatherUrl =\n\t\t\t\"https://www.metaweather.com/api/location/search/?query=\" + query;\n\n\t\tawait fetch(proxyUrl + metaWeatherUrl)\n\t\t\t.then(res => res.json())\n\t\t\t.then(json => {\n\t\t\t\tconsole.log(json);\n\t\t\t\tjson.forEach(element => {\n\t\t\t\t\tconsole.log(element);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch(() =>\n\t\t\t\tconsole.log(\n\t\t\t\t\t\"Canâ€™t access \" + metaWeatherUrl + \" response. Blocked by browser?\"\n\t\t\t\t)\n\t\t\t);\n\t}\n\n\t// getWether = async event => {\n\t// \tevent.preventDefault();\n\n\t// \tconst api_location_search = await fetch(\n\t// \t\t\"https://www.metaweather.com/api/location/search/?query=london\",\n\t// \t\t{ mode: \"no-cors\", cache: \"no-cache\" }\n\t// \t);\n\n\t// \tconst { woeid } = await api_location_search;\n\n\t// \tconsole.log(api_location_search.json());\n\t// \tconsole.log(woeid);\n\t// };\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Titles />\n\t\t\t\t<Form loadWeather={this.getWether} />\n\t\t\t\t<Weather />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}